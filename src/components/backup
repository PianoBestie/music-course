import { useState, useRef, useEffect } from "react";
import { OpenSheetMusicDisplay } from "opensheetmusicdisplay";
import { Midi } from "@tonejs/midi";
import * as Tone from "tone";
import JSZip from "jszip"; // For handling .mxl files
import Play from "./Play";

const MSheet = () => {
  const [selectedNoteKnowledge, setSelectedNoteKnowledge] = useState(null); // For Note Knowledge dropdown
  const [selectedChordKnowledge, setSelectedChordKnowledge] = useState(null); // For Chord Knowledge dropdown
  const [osmd, setOsmd] = useState(null);
  const [activeKey, setActiveKey] = useState(null); // For piano key highlighting
  const [notesReady, setNotesReady] = useState(false); // Track if notes are ready
  const [isOsmdReady, setIsOsmdReady] = useState(false); // Track if OSMD is initialized
  const sheetMusicDiv = useRef(null);
  const synth = useRef(new Tone.Synth().toDestination()); // Tone.js synthesizer
  const graphicalNotes = useRef([]); // Store graphical notes for highlighting
const [midiFile, setMidiFile] = useState(null); // Add this line
  // Embedded files for Note Knowledge and Chord Knowledge
  const noteKnowledgeFiles = {
    "Basic Notes": {
      xml: "./ex2.xml", // Replace with actual path
      midi: "/ex2.mid ", // Replace with actual path
    },
    "Advanced Notes": {
      xml: "./.xml", // Replace with actual path
      midi: "/.mid ", // Replace with actual path
    },
  };

  const chordKnowledgeFiles = {
    "Basic Chords": {
      xml: "/path/to/basic_chords.xml", // Replace with actual path
      midi: "/path/to/basic_chords.mid", // Replace with actual path
    },
    "Advanced Chords": {
      xml: "/path/to/advanced_chords.xml", // Replace with actual path
      midi: "/path/to/advanced_chords.mid", // Replace with actual path
    },
  };

  // Piano UI state and functions
  const whiteKeys = ["C", "D", "E", "F", "G", "A", "B"];
  const blackKeys = { "C#": 0, "D#": 1, "F#": 3, "G#": 4, "A#": 5 };

  useEffect(() => {
    if (sheetMusicDiv.current) {
      const newOsmd = new OpenSheetMusicDisplay(sheetMusicDiv.current, {
        autoResize: true,
        backend: "svg",
      });
      setOsmd(newOsmd);
      setIsOsmdReady(true); // OSMD is ready
      console.log("OSMD initialized successfully.");
    }
  }, []);

  // Handle Note Knowledge dropdown change
  const handleNoteKnowledgeChange = (event) => {
    const selectedOption = event.target.value;
    setSelectedNoteKnowledge(selectedOption);

    if (selectedOption && noteKnowledgeFiles[selectedOption]) {
      const { xml, midi } = noteKnowledgeFiles[selectedOption];
      loadSheetMusicFromUrl(xml);
      setMidiFileFromUrl(midi);
    }
  };

  // Handle Chord Knowledge dropdown change
  const handleChordKnowledgeChange = (event) => {
    const selectedOption = event.target.value;
    setSelectedChordKnowledge(selectedOption);

    if (selectedOption && chordKnowledgeFiles[selectedOption]) {
      const { xml, midi } = chordKnowledgeFiles[selectedOption];
      loadSheetMusicFromUrl(xml);
      setMidiFileFromUrl(midi);
    }
  };

  // Load sheet music from a URL
  const loadSheetMusicFromUrl = async (url) => {
    try {
      const response = await fetch(url);
      const content = await response.text();
      loadSheetMusicContent(content);
    } catch (error) {
      console.error("Error loading sheet music from URL:", error);
      alert("Error loading sheet music. Please check the file URL.");
    }
  };

  // Set MIDI file from a URL
  const setMidiFileFromUrl = async (url) => {
    try {
      const response = await fetch(url);
      if (!response.ok) {
        throw new Error(`HTTP error! Status: ${response.status}`);
      }
      const arrayBuffer = await response.arrayBuffer();
      setMidiFile(new Blob([arrayBuffer], { type: "audio/midi" })); // Use "audio/midi" MIME type
    } catch (error) {
      console.error("Error loading MIDI file from URL:", error);
      alert("Error loading MIDI file. Please check the file URL.");
    }
  };

  // Load sheet music content (same as before)
  const loadSheetMusicContent = (content) => {
    if (!osmd) {
      console.error("OSMD is not initialized.");
      return;
    }

    osmd
      .load(content)
      .then(() => {
        console.log("Sheet music loaded successfully.");
        return osmd.render(); // Return the render promise
      })
      .then(() => {
        osmd.sheet.title.print = false;
        osmd.render();
        console.log("Sheet music rendered successfully.");
        extractGraphicalNotes(); // Now safe to extract graphical notes
      })
      .catch((error) => {
        console.error("Error loading sheet music:", error);
        alert("Error loading sheet music. Please check the file format.");
      });
  };

  // Extract graphical notes (same as before)
  const extractGraphicalNotes = () => {
    if (!osmd || !osmd.sheet) {
      console.error("OSMD is not fully loaded.");
      return;
    }

    graphicalNotes.current = []; // Reset graphical notes

    osmd.sheet.Instruments.forEach((instrument) => {
      instrument.staves.forEach((staff) => {
        staff.voices.forEach((voice) => {
          voice.voiceEntries.forEach((voiceEntry) => {
            voiceEntry.notes.forEach((note) => {
              if (note.pitch) {
                const halfTone = note.pitch.halfTone;
                const noteName = getNoteNameFromHalfTone(halfTone);

                // Assign a unique ID to the note's SVG element
                if (note.graphicalNote && note.graphicalNote.svgElement) {
                  const noteId = `note-${graphicalNotes.current.length}`;
                  note.graphicalNote.svgElement.setAttribute("id", noteId);

                  // Change the color of the note to red
                  note.graphicalNote.svgElement.setAttribute("fill", "red");

                  graphicalNotes.current.push({
                    noteName, // Store the note name with octave
                    note, // Store the note object
                    graphicalNote: note.graphicalNote, // Store the graphical representation
                    noteId, // Store the unique ID for the SVG element
                  });
                }
              }
            });
          });
        });
      });
    });

    console.log("Graphical notes extracted:", graphicalNotes.current);
    setNotesReady(true);
  };

  // Helper function to convert halfTone to note name (same as before)
  const getNoteNameFromHalfTone = (halfTone) => {
    const noteNames = [
      "C", "C#", "D", "D#", "E", "F", "F#", "G", "G#", "A", "A#", "B",
    ];
    const octave = Math.floor(halfTone / 12); // Calculate octave
    const noteIndex = halfTone % 12; // Calculate note index
    return `${noteNames[noteIndex]}${octave}`; // Combine note name and octave
  };

  // Highlight sheet note (same as before)

  let currentNoteIndex = 0; // Track the current note index

  const highlightSheetNote = (duration) => {
    if (!osmd || !osmd.sheet || !osmd.sheet.staves || osmd.sheet.staves.length === 0) {
      console.error("OSMD or sheet music is not fully loaded.");
      return;
    }
  
    let noteCount = 0; // Track the total number of notes processed
  
    // Iterate through all staves one by one in ascending order
    for (let i = 0; i < osmd.sheet.staves.length; i++) {
      const staff = osmd.sheet.staves[i];
      if (staff.voices.length === 0) continue; // Skip if no voices in this staff
  
      // Iterate through all voices in the staff
      for (const voice of staff.voices) {
        // Iterate through all voice entries in this voice
        for (const voiceEntry of voice.voiceEntries) {
          for (const note of voiceEntry.notes) {
            // Highlight only the note at the current index
            if (noteCount === currentNoteIndex) {
              console.log(`Highlighting note at index ${currentNoteIndex}: ${note.name}`); // Log the match
  
              if (note.noteheadColor !== undefined) {
                note.noteheadColor = "orange"; // Highlight note
                osmd.render(); // Render immediately after highlighting
  
                // Reset color after the specified duration
                setTimeout(() => {
                  note.noteheadColor = "black"; // Reset color
                  osmd.render(); // Re-render once after reset
                }, duration * 1000); // Use the received duration (convert to milliseconds)
              }
  
              // Move to the next note index
              currentNoteIndex++;
              return; // Exit after highlighting the current note
            }
  
            // Increment the note count
            noteCount++;
          }
        }
      }
    }
  
    // Reset the note index if all notes have been highlighted
    if (currentNoteIndex >= noteCount) {
      currentNoteIndex = 0; // Restart from the beginning
    }
  };
  // Play MIDI file (same as before)
  const playMidiFile = async () => {
    if (!midiFile) {
      alert("Please select a category first.");
      return;
    }

    if (!notesReady) {
      alert("Sheet music is not fully loaded yet. Please wait.");
      return;
    }

    // Stop and reset transport before playing again
    Tone.Transport.stop();
    Tone.Transport.cancel(); // Clear scheduled events
    Tone.Transport.position = 0; // Reset transport position

    const reader = new FileReader();
    reader.onload = async (e) => {
      const arrayBuffer = e.target.result;
      const midi = new Midi(arrayBuffer);

      // Reset OSMD cursor before playback
      if (osmd.cursors && osmd.cursors.length > 0) {
        const cursor = osmd.cursors[0];
        cursor.show();
        cursor.reset(); // Reset cursor to the beginning
      } else {
        console.error("No cursor found in OSMD.");
        return;
      }

      // Schedule MIDI notes
      midi.tracks.forEach((track) => {
        track.notes.forEach((note) => {
          Tone.Transport.scheduleOnce((time) => {
            synth.current.triggerAttackRelease(note.name, note.duration, time);
            highlightPianoKey(note.name, true, note.duration); // Highlight piano key
            highlightSheetNote(note.duration); // Highlight sheet note
          }, note.time);
        });
      });

      // Start playback
      Tone.Transport.start();
    };
    reader.readAsArrayBuffer(midiFile);
  };

  // Highlight piano key (same as before)
  const highlightPianoKey = (noteName, isActive, duration = 0.5) => {
    setActiveKey(isActive ? noteName : null);
    setTimeout(() => setActiveKey(null), duration * 1000); // Remove highlight after duration
  };

  return (
    <>
    <div>
      <div className="flex">
        {/* Note Knowledge Dropdown */}
        <select
          onChange={handleNoteKnowledgeChange}
          value={selectedNoteKnowledge || ""}
          className="px-3 py-2 border rounded-sm"
        >
          <option value="">Select Note Knowledge</option>
          {Object.keys(noteKnowledgeFiles).map((option) => (
            <option key={option} value={option}>
              {option}
            </option>
          ))}
        </select>

        {/* Chord Knowledge Dropdown */}
        <select
          onChange={handleChordKnowledgeChange}
          value={selectedChordKnowledge || ""}
          className="px-3 py-2 border rounded-sm ml-2"
        >
          <option value="">Select Chord Knowledge</option>
          {Object.keys(chordKnowledgeFiles).map((option) => (
            <option key={option} value={option}>
              {option}
            </option>
          ))}
        </select>
      </div>

      <button
        onClick={playMidiFile}
        className="px-3 py-2 bg-blue-900 text-white rounded-sm mt-2"
      >
        ▶ Play MIDI
      </button>

      <div
        ref={sheetMusicDiv}
        id="sheet-music-container"
        className="bg-slate-50 flex items-center h-[400px] overflow-y-auto overflow-x-auto"
      ></div>

      {/* Piano UI (same as before) */}
      <div className="piano-container1 mx-5">
        <div className="piano1">
          {/* White Keys */}
          {["4", "5"].map((octave, octaveIndex) =>
            whiteKeys.map((key, i) => (
              <div
                key={key + octave}
                className={`white-key1 key1 ${
                  activeKey === key + octave ? "active" : ""
                }`}
                style={{
                  left: `${i * 50}px`, // Position of white keys
                }}
              >
                {key + octave}
              </div>
            ))
          )}

          {/* Black Keys */}
          {["4", "5"].map((octave, octaveIndex) =>
            Object.entries(blackKeys).map(([key, pos]) => (
              <div
                key={key + octave}
                className={`black-key1 key1 ${
                  activeKey === key + octave ? "active" : ""
                }`}
                style={{
                  left: `${(pos + octaveIndex * 7) * (100 / 14) + 4}%`, // Position of black keys
                }}
              >
                {key}
              </div>
            ))
          )}
        </div>
      </div>

      <style>
        {`
          .piano-container1 {
            display: flex;
            flex-direction: column;
            align-items: center;
            margin-top: 20px;
          }
          .piano1 {
            position: relative;
            display: flex;
            border: 3px solid #333;
            border-radius: 12px;
            background: linear-gradient(145deg, #444, #222);
            padding: 1px;
            width: 100%;
            height: 220px;
            box-shadow: 0 10px 20px rgba(0, 0, 0, 0.5);
          }

          .white-key1 {
            width: 14.28%; /* Equal width for 7 white keys */
            height: 200px;
            background: linear-gradient(145deg, #fff, #f0f0f0);
            border: 1px solid #ccc;
            border-radius: 0 0 6px 6px;
            color: #333;
            box-shadow: 2px 5px 10px rgba(0, 0, 0, 0.3);
            margin-right: -1px;
          }

          .black-key1 {
            width: 4.57%; /* Equal width for 5 black keys */
            height: 120px;
            background: linear-gradient(145deg, #222, #000);
            color: #fff;
            z-index: 1;
            position: absolute;
            border-radius: 0 0 4px 4px;
            box-shadow: 3px 5px 10px rgba(0, 0, 0, 0.5);
          }
          .key1 {
            display: flex;
            justify-content: center;
            align-items: flex-end;
            font-size: 12px;
            font-weight: bold;
            user-select: none;
            cursor: pointer;
            transition: background 0.1s, transform 0.1s;
          }

          .active {
            background: linear-gradient(135deg, #00b4db 0%, #0083b0 100%) !important;
            transform: scale(1.05);
            box-shadow: 0 3px 8px rgba(0, 0, 0, 0.4);
          }
        `}
      </style>
    </div>
    </>
  );
};

export default MSheet;